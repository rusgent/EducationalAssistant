from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandObject
import datetime
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.exceptions import TelegramForbiddenError, TelegramRetryAfter
from pdf2image import convert_from_bytes
import asyncio
import os
import html
from handlers.user_routers.states import *
from aiogram.fsm.context import FSMContext
from database.orm import Database
from keyboards import inline_kb
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin, quote
from io import BytesIO
from aiogram.filters import BaseFilter
from dotenv import load_dotenv
from aiogram.types import Message
import os
import logging
from datetime import datetime, timedelta

import handlers.admin_routers.keyboards as kb
from handlers.admin_routers.states import *

load_dotenv()
logging.basicConfig(level=logging.INFO)

admin_ids = [int(admin_id) for admin_id in os.getenv("ADMIN_IDS", "").split(",")]

class IsAdmin(BaseFilter):
    def __init__(self, admin_ids: list[int]):
        self.admin_ids = admin_ids

    async def __call__(self, message: Message) -> bool:
        is_admin = message.from_user.id in self.admin_ids
        return is_admin

admin_ids = [int(admin_id) for admin_id in os.getenv("ADMIN_IDS", "").split(",")]
#admin_ids = [1006706663, 2084271395]

admin_router = Router()
admin_router.message.filter(IsAdmin(admin_ids))

async def add_proxy_data(state: FSMContext, data: dict):
    # –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    proxy_data = await state.get_data()

    # –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ
    proxy_data.update(data)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.set_data(proxy_data)


@admin_router.message(Command("ad"))
async def cmd_admin_panel(message: Message, state: FSMContext):
    await state.clear()
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    ADMIN_PANEL_TEXT = (
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> üîê\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "üìã <b>/view_users</b> ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/find_menu - –ù–∞–π—Ç–∏ –º–µ–Ω—é\n"
        '/upd_menu_bd - –û–±–Ω–æ–≤–∏—Ç—å –ë–î'
    )
    sent_message = await message.answer_sticker(sticker="CAACAgIAAxkBAAENXKZnZb7qQc48z8cCp6jlLOVZo8WznQACQQEAAs0bMAjx8GIY3_aWWDYE", reply_markup=ReplyKeyboardRemove())
    await message.bot.delete_message(chat_id=message.chat.id, message_id=sent_message.message_id)
    await message.answer(ADMIN_PANEL_TEXT, parse_mode="HTML", reply_markup=kb.ikb_menu)
    
@admin_router.callback_query(F.data == 'go_back_admin_panel')
async def cb_admin_panel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    ADMIN_PANEL_TEXT = (
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> üîê\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "üìã <b>/view_users</b> ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/find_menu - –ù–∞–π—Ç–∏ –º–µ–Ω—é\n"
        '/upd_menu_bd - –û–±–Ω–æ–≤–∏—Ç—å –ë–î'
    )
    sent_message = await callback.message.answer_sticker(sticker="CAACAgIAAxkBAAENXKZnZb7qQc48z8cCp6jlLOVZo8WznQACQQEAAs0bMAjx8GIY3_aWWDYE", reply_markup=ReplyKeyboardRemove())
    await callback.message.bot.delete_message(chat_id=callback.message.chat.id, message_id=sent_message.message_id)
    await callback.message.answer(ADMIN_PANEL_TEXT, parse_mode="HTML", reply_markup=kb.ikb_menu)
    await callback.answer()
    
@admin_router.callback_query(F.data == 'add_new_prem_user')
async def add_new_prem_user(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('‚ùì –û—Ç–ø—Ä–∞–≤—å ID —é–∑–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –ê–ö–¢–ò–í–ò–†–û–í–ê–¢–¨', reply_markup=kb.ikb_back_menu)
    await state.set_state(AddNewPrem.wait_send_id)
    await callback.answer()
    
@admin_router.message(AddNewPrem.wait_send_id)
async def give_id_new_prem_user(message: Message, state: FSMContext):
    await state.update_data(user_id=message.text)
    await message.answer('‚ùì –û—Ç–ø—Ä–∞–≤—å —Å–∫–æ–ª—å–∫–æ –æ–Ω —Ç–µ–±–µ –ø–µ—Ä–µ–≤–µ–ª', reply_markup=kb.kb_money_20)
    await state.set_state(AddNewPrem.wait_send_money)

@admin_router.message(AddNewPrem.wait_send_money)
async def give_money_new_prem_user(message: Message, state: FSMContext):
    await state.update_data(money=message.text)
    await state.update_data(days=(int(message.text)/20)*30)

    data = await state.get_data()
    money = data['money']
    user_id = data['user_id']
    days = data['days']

    user = await Database.check_user(int(user_id))
    user_prem = await Database.check_in_premium_users_table(int(user_id))
    
    if not user:
        await message.answer(f'‚ùå –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\nID - {user_id}', reply_markup=kb.ikb_back_menu)
        
    elif user_prem:
        await message.answer((f'‚ùå –£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_prem.fullname} —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–µ–º–∫–∞!\n'
                              f'ID - {user_prem.tg_id} | @{user_prem.username}\n\n'
                              f'–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {(user_prem.premium_end_date).strftime("%d.%m.%Y")}'),
                             reply_markup=kb.ikb_back_menu)
        
    
    else:
        await message.answer((f'üö© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.fullname} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω!\n'
                              f'ID - {user.user_id} | @{user.username}\n\n'
                              f'–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {(datetime.now() + timedelta(int(days))).date().strftime("%d.%m.%Y")}'),
                             reply_markup=kb.ikb_yes_no)
        
@admin_router.callback_query(F.data.startswith('res_'))
async def cb_yes_no(callback: CallbackQuery, state: FSMContext, bot: Bot):
    a, res = callback.data.split('_')

    if res == 'yes':
            data = await state.get_data()
            money = int(data['money'])
            user_id = int(data['user_id'])
            days = int(data['days'])

            user = await Database.check_user(int(user_id))
            if user:
                await callback.message.answer((f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.fullname} –±—ã–ª–∞ –£–°–ü–ï–®–ù–û –í–´–î–ê–ù–ê –ü–†–ï–ú–ö–ê!\n'
                                    f'ID - {user.user_id} | @{user.username}\n\n'
                                    f'–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {(datetime.now() + timedelta(int(days))).date().strftime("%d.%m.%Y")}'),
                                    reply_markup=kb.ikb_menu)

                await Database.add_new_prem_user(user_id, user.username, user.fullname,
                                                (datetime.now() + timedelta(int(days))).date(),
                                                bot, money, days)

                await bot.send_message(chat_id=user_id,text = (
                                            f"<b>üéâ –£—Ä–∞! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π –¥–æ {(datetime.now() + timedelta(int(days))).date().strftime('%d.%m.%Y')} –∑–∞ {money} —Ä—É–±–ª–µ–π!\n\n</b>"
                                            "–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–≥–æ —à–∫–æ–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞:\n"
                                            "<i>üìö –£–¥–æ–±–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
                                            "üßÆ –£–º–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ—Ü–µ–Ω–æ–∫\n"
                                            "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ\n"
                                            "üöÄ –ò –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!</i>\n\n"
                                            "<b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏ ‚ù§Ô∏è</b>"
                                        ))

    elif res == 'no':
        await callback.message.answer('‚ùå –û—Ç–º–µ–Ω–∞!', reply_markup=kb.ikb_back_menu)
        
@admin_router.callback_query(F.data == 'del_prem_user')
async def cb_del_prem_user(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('‚ùì –û—Ç–ø—Ä–∞–≤—å ID –ø—Ä–µ–º–∏—É–º-—é–∑–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –£–î–ê–õ–ò–¢–¨ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–µ–º–∏—É–º-—é–∑–µ—Ä–æ–≤', reply_markup=kb.ikb_back_menu)
    await state.set_state(DelPrem.wait_send_id)
    await callback.answer()


@admin_router.message(DelPrem.wait_send_id)
async def send_id_del_prem(message: Message, state: FSMContext):
    user_id = message.text
    await state.update_data(user_id=message.text)
    user_prem = await Database.check_in_premium_users_table(int(user_id))
    await state.update_data(user_prem=user_prem)
    if not user_prem:
        await message.answer(f'‚ùå –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º-—é–∑–µ—Ä–æ–≤!\nID - {user_id}', reply_markup=kb.ikb_back_menu)
        
    elif user_prem:
        await message.answer((f'üö© –£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_prem.fullname} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–µ–º–∫–∞!\n'
                              f'ID - {user_prem.tg_id} | @{user_prem.username}\n\n'
                              f'–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {(user_prem.premium_end_date).strftime("%d.%m.%Y")}\n'
                              '–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –£–î–ê–õ–ò–¢–¨ —Å –ë–î –ø—Ä–µ–º–∏—É–º-—é–∑–µ—Ä–æ–≤???'),
                             reply_markup=kb.ikb_del_yes_no)


@admin_router.callback_query((F.data == 'del_yes') | (F.data == 'del_no'))
async def yes_no_del_prem(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = int(data['user_id'])
    user_prem = data['user_prem']
    
    if callback.data == 'del_yes':
        await Database.del_prem_user(user_id)
        await callback.message.answer((f'üóë –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_prem.fullname} –±—ã–ª —É—Å–ø–µ—à–Ω–æ –£–î–ê–õ–ï–ù!\n'
                              f'ID - {user_prem.tg_id} | @{user_prem.username}\n\n'
                              f'–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –±—ã–ª–∞ –¥–æ {(user_prem.premium_end_date).strftime("%d.%m.%Y")}\n'
                              ),
                             reply_markup=kb.ikb_back_menu)
        

    elif callback.data == 'del_no':
        await callback.message.answer((f'‚ùå –û—Ç–º–µ–Ω–∞ –£–î–ê–õ–ï–ù–ò–Ø –ø—Ä–µ–º–∏—É–º-—é–∑–µ—Ä–∞'),
                             reply_markup=kb.ikb_back_menu)
    
    await callback.answer()
    
@admin_router.callback_query(F.data == 'check_list_users')
async def cb_check_list_users(callback: CallbackQuery):
    await callback.message.edit_text("‚ùóÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏—Ö —é–∑–µ—Ä–æ–≤ –±—É–¥–µ–º —á–µ–∫–∞—Ç—å :)", reply_markup=kb.ikb_check_normal_or_prem_users)
    await callback.answer()
    
@admin_router.callback_query((F.data == 'check_normal_users') | (F.data == 'check_prem_users'))
async def check_lists_users(callback: CallbackQuery):
    if callback.data == 'check_normal_users':
            users = await Database.get_all_users()
            user_count = len(users)

            if users:
                user_list = "\n".join([f"ID: <code>{user.user_id}</code>, Username: @{html.escape(user.username or '‚Äî')}, –ò–º—è: {html.escape(user.fullname or '‚Äî')}" for user in users])

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
                max_message_length = 4000
                if len(user_list) > max_message_length:
                    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏
                    chunks = [user_list[i:i + max_message_length] for i in range(0, len(user_list), max_message_length)]
                    for chunk in chunks:
                        await callback.message.answer(
                            f"üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{chunk}\n\n"
                            f"üî¢ <b>–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {user_count}"
                        )
                else:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º
                    await callback.message.answer(
                        f"üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{user_list}\n\n"
                        f"üî¢ <b>–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {user_count}"
                    )
            else:
                await callback.message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            
    elif callback.data == 'check_prem_users':
            users = await Database.get_all_prem_users()
            user_count = len(users)

            if users:
                user_list = "\n".join([f"ID: <code>{user.tg_id}</code>, Username: @{html.escape(user.username or '‚Äî')}, –ò–º—è: {html.escape(user.fullname or '‚Äî')}" for user in users])

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
                max_message_length = 4000
                if len(user_list) > max_message_length:
                    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏
                    chunks = [user_list[i:i + max_message_length] for i in range(0, len(user_list), max_message_length)]
                    for chunk in chunks:
                        await callback.message.answer(
                            f"üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{chunk}\n\n"
                            f"üî¢ <b>–í—Å–µ–≥–æ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {user_count}"
                        )
                else:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º
                    await callback.message.answer(
                        f"üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{user_list}\n\n"
                        f"üî¢ <b>–í—Å–µ–≥–æ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {user_count}"
                    )
            else:
                await callback.message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    

@admin_router.message(Command("testmenu"))
async def cmd_test(message: Message):
        await message.answer(text = (
                        "üî• <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—Å—è –≤ 00:00!</b> üî•\n\n"
                        "‚è≥ –í—Ä–µ–º—è –Ω–∞ –∏—Å—Ö–æ–¥–µ! –£—Å–ø–µ–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ–∫–∞ –±–æ—Ç –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç.\n\n"
                        "üöÄ <b>–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?</b> –ó–∞—Ö–æ–¥–∏ –≤ <b>–º–µ–Ω—é (/menu) </b>, –≤—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª –∏ –ø—Ä–æ–±—É–π —Å–∞–º!\n\n"
                        "‚ö° <b>–°–ø–µ—à–∏, –ø–æ–∫–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ!</b> –ü–æ—Å–ª–µ 12—Ç–∏ –±–æ—Ç —É—Ö–æ–¥–∏—Ç –Ω–∞ –æ—Ç–¥—ã—Ö üòè\n\n"
                        "<i>üîß –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –º–µ–Ω—é –ø–æ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!</i>"
                    ))
        
@admin_router.message(Command('del'))
async def cmd_del_user(message: Message, command: CommandObject):
    user_id = int(command.args)
    a = await Database.del_user(user_id)
    if a:
        await message.answer(f"‚úÖ‚úÖ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \nID: {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ –æ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î.")
    else:
        await message.answer(f"‚ùå –ù–ï –£–î–ê–õ–û–°–¨!!!! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \nID: {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ –æ–Ω –ù–ï –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î.")


@admin_router.message(Command("view_users"))
async def view_users(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    users = await Database.get_all_users()
    user_count = len(users)

    if users:
        user_list = "\n".join([f"ID: {user.user_id}, Username: @{user.username}, –ò–º—è: {user.fullname}" for user in users])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
        max_message_length = 4000
        if len(user_list) > max_message_length:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏
            chunks = [user_list[i:i + max_message_length] for i in range(0, len(user_list), max_message_length)]
            for chunk in chunks:
                await message.answer(
                    f"üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{chunk}\n\n"
                    f"üî¢ <b>–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {user_count}",
                    parse_mode="HTML"
                )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º
            await message.answer(
                f"üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{user_list}\n\n"
                f"üî¢ <b>–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {user_count}",
                parse_mode="HTML"
            )
    else:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        
        
 # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PDF-—Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç—å
def download_pdf_in_memory(pdf_url):
    response = requests.get(pdf_url)
    if response.status_code == 200:
        return response.content
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏
def pdf_to_image_from_bytes(pdf_bytes):
    images = convert_from_bytes(pdf_bytes)
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img_io = BytesIO()
    images[0].save(img_io, 'PNG')
    img_io.seek(0)
    return img_io

@admin_router.message(Command('upd_menu_bd'))
async def cmd_upd_menu(message: Message, state: FSMContext):
    await message.answer(f'–£—à–µ–ª –∏—Å–∫–∞—Ç—å –º–µ–Ω—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–¥, —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å –±–æ—Å—Å!')
    url = "https://moausoch3buraevo.02edu.ru/meal/menu/"

    responce = requests.get(url)

    if responce.status_code == 200:
        soup = BeautifulSoup(responce.text, 'html.parser')

        pdf_link = soup.find('a', class_='mr-1 sf-link sf-link-theme sf-link-dashed')
        data = soup.find('h3', class_="t-1 mt-4")
        if pdf_link and 'href' in pdf_link.attrs and data:
            pdf_url = urljoin(url, pdf_link['href'])
            res_url = quote(pdf_url, safe=':/')
            await state.update_data({"data": data.text.strip()})
            if res_url:
                await message.answer(f'–î–∞—Ç–∞ - {data.text.strip()}\n–°—Å—ã–ª–∫–∞ –Ω–∞ PDF-–º–µ–Ω—é - {res_url}')
                await state.set_state(SendMenu.wait_photo_to_bd)
            else:
                await message.answer(f'–Ø –Ω–µ –Ω–∞—à–µ–ª –º–µ–Ω—é!!!')
        else:
            await message.answer(f'–Ø –Ω–µ –Ω–∞—à–µ–ª –º–µ–Ω—é!!!')

    else:
        await message.answer(f'–Ø –Ω–µ –Ω–∞—à–µ–ª –º–µ–Ω—é!!!')

@admin_router.message(SendMenu.wait_photo_to_bd)
async def get_photo_to_upd_meu(message: Message, state: FSMContext):
    if message.photo:
        photo_id = message.photo[-1].file_id
        data = await state.get_data()
        date = data.get('data')
        await Database.edit_school_menu_id(photo_id, date=date)
        await message.answer((f"‚úÖ –ó–∞–ø–∏—Å—å –≤ –ë–î —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞\n"
                               f"Photo_id - {photo_id}\n"
                               f"Date - {date}"))


@admin_router.message(Command('find_menu'))
async def cmd_find_menu(message: Message, state: FSMContext):
    await message.answer(f'–£—à–µ–ª –∏—Å–∫–∞—Ç—å –º–µ–Ω—é, —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å –±–æ—Å—Å!')
    url = "https://moausoch3buraevo.02edu.ru/meal/menu/"

    responce = requests.get(url)

    if responce.status_code == 200:
        soup = BeautifulSoup(responce.text, 'html.parser')

        pdf_link = soup.find('a', class_='mr-1 sf-link sf-link-theme sf-link-dashed')
        data = soup.find('h3', class_="t-1 mt-4")
        if pdf_link and 'href' in pdf_link.attrs and data:
            pdf_url = urljoin(url, pdf_link['href'])
            res_url = quote(pdf_url, safe=':/')
            await state.update_data({"data": data.text.strip()})
            if res_url:
                await message.answer(f'–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –î–∞—Ç–∞ - {datetime.datetime.now().strftime("%Y-%m-%d")}\n–î–∞—Ç–∞ - {data.text.strip()}\n–°—Å—ã–ª–∫–∞ –Ω–∞ PDF-–º–µ–Ω—é - {res_url}')
                await state.set_state(SendMenu.wait_photo)
            else:
                await message.answer(f'–Ø –Ω–µ –Ω–∞—à–µ–ª –º–µ–Ω—é!!!')
        else:
            await message.answer(f'–Ø –Ω–µ –Ω–∞—à–µ–ª –º–µ–Ω—é!!!')

    else:
        await message.answer(f'–Ø –Ω–µ –Ω–∞—à–µ–ª –º–µ–Ω—é!!!')
        
@admin_router.message(SendMenu.wait_photo)
async def get_photo(message: Message, state: FSMContext):
    if message.photo:
        photo_id = message.photo[-1].file_id
        data = await state.get_data()
        date = data.get('data')
        await message.answer_photo(
                    photo=photo_id,
                            #caption = (f"<b><blockquote>–ú–µ–Ω—é –Ω–∞ {date}</blockquote></b>\n"
                            caption = (f"<b><blockquote>–ú–µ–Ω—é –Ω–∞ 20.05.2025</blockquote></b>\n"
                            #"<b>‚ùóÔ∏è –ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢ 24/7, –º–æ–∂–µ—Ç–µ —Å–º–µ–ª–æ —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –±–æ—Ç–∞ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º ‚ùóÔ∏è</b>\n\n"
                            "<a href='https://t.me/botdevrus'>üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</a>\n"
                            "üí° <b>–ú—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç—ã –∫ –≤–∞—à–∏–º –∏–¥–µ—è–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º!</b> –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –µ—â—ë –ª—É—á—à–µ, "
                            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º–∏ —Å –Ω–∞–º–∏ ‚Äî –º—ã —Ä–∞–¥—ã —Å–ª—ã—à–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!\n\n"
                            "‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã - /notif_menu ‚ùóÔ∏è\n"
                            "<i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∂–µ–ª–∞–µ—Ç –≤–∞–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏ üòä</i>\n\n"
                            "üìö <b>–î–æ –∫–æ–Ω—Ü–∞ —É—á—ë–±—ã –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 4 —É—á–µ–±–Ω—ã—Ö –¥–Ω–µ–π!</b>\n"
                            "<i>–°–∫–æ—Ä–æ –∫–∞–Ω–∏–∫—É–ª—ã, –¥–µ—Ä–∂–∏—Ç–µ—Å—å ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä—ã–≤–æ–∫! üí™ –£–¥–∞—á–∏ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ‚ú®</i>"))
                    
                    # caption = (f"<b><blockquote>–ú–µ–Ω—é –Ω–∞ {date}</blockquote></b>\n"
                    #         #"<b>‚ùóÔ∏è –ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢ 24/7, –º–æ–∂–µ—Ç–µ —Å–º–µ–ª–æ —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –±–æ—Ç–∞ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º ‚ùóÔ∏è</b>\n\n"
                    #         "<a href='https://t.me/botdevrus'>üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</a>\n"
                    #         "üí° <b>–ú—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç—ã –∫ –≤–∞—à–∏–º –∏–¥–µ—è–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º!</b> –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –µ—â—ë –ª—É—á—à–µ, "
                    #         "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º–∏ —Å –Ω–∞–º–∏ ‚Äî –º—ã —Ä–∞–¥—ã —Å–ª—ã—à–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!\n\n"
                    #         "‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã - /notif_menu ‚ùóÔ∏è\n"
                    #         "<i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∂–µ–ª–∞–µ—Ç –≤–∞–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏ üòä</i>\n\n"
                    #         "üìö <b>–î–æ –∫–æ–Ω—Ü–∞ —É—á—ë–±—ã –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 13 –¥–Ω–µ–π!</b>\n"
                    #         "<i>–°–∫–æ—Ä–æ –∫–∞–Ω–∏–∫—É–ª—ã, –¥–µ—Ä–∂–∏—Ç–µ—Å—å ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä—ã–≤–æ–∫! üí™ –£–¥–∞—á–∏ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ‚ú®</i>"))
        await message.answer_photo(photo=photo_id, caption='–í—ã –∂–µ–ª–∞–µ—Ç–µ –¥–∞–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º —é–∑–µ—Ä–∞–º?')
        await state.update_data(photo_id=photo_id)
        await state.set_state(SendMenu.wait_yes)
        
@admin_router.message(SendMenu.wait_yes)
async def send_menu_users(message: Message, state: FSMContext, bot: Bot):
    failed_count = 0
    success_count = 0
    zabl_count = 0
    if message.text == '1':
        data = await state.get_data()
        photo_id = data.get('photo_id')
        date = data.get('data')
        await Database.edit_school_menu_id(photo_id, date=date)
        await message.answer((f"‚úÖ –ó–∞–ø–∏—Å—å –≤ –ë–î —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞\n"
                               f"Photo_id - {photo_id}\n"
                               f"Date - {date}"))
        
        users_list = await Database.get_all_users()
            
        for user in users_list:
            user_info = (f"ID: {user.user_id}\n"
                        f"Username: @{user.username}\n"
                         f"–ò–º—è: {user.fullname}")
            if int(user.is_notif) == 1:
                try:
                    await bot.send_photo(
                        chat_id=user.user_id,
                        photo=photo_id,
                            #caption = (f"<b><blockquote>–ú–µ–Ω—é –Ω–∞ {date}</blockquote></b>\n"
                            caption = (f"<b><blockquote>–ú–µ–Ω—é –Ω–∞ 20.05.2025</blockquote></b>\n"
                            #"<b>‚ùóÔ∏è –ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢ 24/7, –º–æ–∂–µ—Ç–µ —Å–º–µ–ª–æ —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –±–æ—Ç–∞ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º ‚ùóÔ∏è</b>\n\n"
                            "<a href='https://t.me/botdevrus'>üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</a>\n"
                            "üí° <b>–ú—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç—ã –∫ –≤–∞—à–∏–º –∏–¥–µ—è–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º!</b> –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –µ—â—ë –ª—É—á—à–µ, "
                            "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º–∏ —Å –Ω–∞–º–∏ ‚Äî –º—ã —Ä–∞–¥—ã —Å–ª—ã—à–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!\n\n"
                            "‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã - /notif_menu ‚ùóÔ∏è\n"
                            "<i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∂–µ–ª–∞–µ—Ç –≤–∞–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏ üòä</i>\n\n"
                            "üìö <b>–î–æ –∫–æ–Ω—Ü–∞ —É—á—ë–±—ã –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 4 —É—á–µ–±–Ω—ã—Ö –¥–Ω–µ–π!</b>\n"
                            "<i>–°–∫–æ—Ä–æ –∫–∞–Ω–∏–∫—É–ª—ã, –¥–µ—Ä–∂–∏—Ç–µ—Å—å ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä—ã–≤–æ–∫! üí™ –£–¥–∞—á–∏ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ‚ú®</i>"))

                        
                        # caption = (f"<b><blockquote>–ú–µ–Ω—é –Ω–∞ {date}</blockquote></b>\n"
                        #     #"<b>‚ùóÔ∏è –ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢ 24/7, –º–æ–∂–µ—Ç–µ —Å–º–µ–ª–æ —Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –±–æ—Ç–∞ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º ‚ùóÔ∏è</b>\n\n"
                        #     "<a href='https://t.me/botdevrus'>üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</a>\n"
                        #     "üí° <b>–ú—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç—ã –∫ –≤–∞—à–∏–º –∏–¥–µ—è–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º!</b> –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –µ—â—ë –ª—É—á—à–µ, "
                        #     "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º–∏ —Å –Ω–∞–º–∏ ‚Äî –º—ã —Ä–∞–¥—ã —Å–ª—ã—à–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!\n\n"
                        #     "‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã - /notif_menu ‚ùóÔ∏è\n"
                        #     "<i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∂–µ–ª–∞–µ—Ç –≤–∞–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏ üòä</i>\n\n"
                        #     "üìö <b>–î–æ –∫–æ–Ω—Ü–∞ —É—á—ë–±—ã –æ—Å—Ç–∞–ª–æ—Å—å –≤—Å–µ–≥–æ 13 –¥–Ω–µ–π!</b>\n"
                        #     "<i>–°–∫–æ—Ä–æ –∫–∞–Ω–∏–∫—É–ª—ã, –¥–µ—Ä–∂–∏—Ç–µ—Å—å ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä—ã–≤–æ–∫! üí™ –£–¥–∞—á–∏ –∏ —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è ‚ú®</i>"))

                    # await bot.send_message(
                    # chat_id=user.user_id,
                    # text = (
                    #         "üî• <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—Å—è –≤ 00:00!</b> üî•\n\n"
                    #         "‚è≥ –í—Ä–µ–º—è –Ω–∞ –∏—Å—Ö–æ–¥–µ! –£—Å–ø–µ–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ–∫–∞ –±–æ—Ç –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç.\n\n"
                    #         "üöÄ <b>–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?</b> –ó–∞—Ö–æ–¥–∏ –≤ <b>–º–µ–Ω—é (/menu) </b>, –≤—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª –∏ –ø—Ä–æ–±—É–π —Å–∞–º!\n\n"
                    #         "‚ö° <b>–°–ø–µ—à–∏, –ø–æ–∫–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ!</b> –ü–æ—Å–ª–µ 12—Ç–∏ –±–æ—Ç —É—Ö–æ–¥–∏—Ç –Ω–∞ –æ—Ç–¥—ã—Ö üòè\n\n"
                    #         "<i>üîß –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –º–µ–Ω—é –ø–æ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!</i>"
                    #     ))


                    await asyncio.sleep(0.7)
                    await bot.send_message(1006706663, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:\n{user_info}")
                    success_count += 1
                    await asyncio.sleep(0.7)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

                except TelegramForbiddenError:
                    failed_count += 1
                    a = await Database.del_user(int(user.user_id))
                    if a:
                        await bot.send_message(1006706663,f"‚ö†‚ö†‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \nID: {user.user_id}\nUsername: @{user.username}\n–ò–º—è: {user.fullname} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ –æ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î.")
                    else:
                        await bot.send_message(1006706663,f"‚ùå –ù–ï –£–î–ê–õ–û–°–¨!!!! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \nID: {user.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ –æ–Ω –ù–ï –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î.")
                    
                except TelegramRetryAfter as e:
                    await bot.send_message(1006706663, f"‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤! –ñ–¥—É {e.retry_after} —Å–µ–∫.")
                    await asyncio.sleep(e.retry_after)  # –ñ–¥—ë–º, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
                    
                except Exception as e:
                    failed_count += 1
                    await bot.send_message(1006706663, f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é \nID: {user.user_id}\nUsername: @{user.username}\n–ò–º—è: {user.fullname}: {e}")
            elif int(user.is_notif) == 0:
                zabl_count += 1

            # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É –∏—Ç–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏
        await bot.send_message(1006706663, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                            f"‚úî –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                                            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
                                            f"–û—Ç–∫–ª —Ä–∞—Å—Å—ã–ª–∫—É {zabl_count}")

        await state.clear()
    elif message.text == '0':
        await state.clear()
        await bot.send_message(1006706663, f"–û–¢–ú–ï–ù–ê –±—Ä–∞—Ç–∏—à–∫–∞)\n")
        
        
        
@admin_router.message(Command('kan'))
async def send_kan(message: Message, state: FSMContext, bot: Bot):
    users_list = await Database.get_all_users()
        
    failed_count = 0
    success_count = 0
    zabl_count = 0
    
    await bot.send_message(chat_id=1006706663,
                           text = (f"<b>–í–æ—Ç –∏ –≤—Å—ë ‚Äî —É—á–µ–±–Ω—ã–π –≥–æ–¥ –ø–æ–¥–æ—à—ë–ª –∫ –∫–æ–Ω—Ü—É üéì</b>\n"
                            "<b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏ –≤—Å—ë —ç—Ç–æ –≤—Ä–µ–º—è ‚ù§Ô∏è</b>\n\n"
                            "üìö 9—ã–º –∏ 11—ã–º —É–¥–∞—á–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ö ‚Äî –≤—ã —Ç–æ—á–Ω–æ —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å!\n"
                            "üåà –ñ–µ–ª–∞–µ–º –≤–∞–º —è—Ä–∫–æ–≥–æ, —Ç—ë–ø–ª–æ–≥–æ –∏ –±–µ–∑–∑–∞–±–æ—Ç–Ω–æ–≥–æ –ª–µ—Ç–∞.\n"
                            "–ü—É—Å—Ç—å –±—É–¥–µ—Ç –ø–æ–±–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞, —Å–æ–ª–Ω—Ü–∞ –∏ –≤–µ—Å—ë–ª—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤!\n\n"
                            "<i>–ê –º—ã –≤–µ—Ä–Ω—ë–º—Å—è –≤ –Ω–æ–≤–æ–º —É—á–µ–±–Ω–æ–º –≥–æ–¥—É ‚Äî –µ—â—ë –ª—É—á—à–µ üí™</i>"))
    
    for user in users_list:
        user_info = (f"ID: {user.user_id}\n"
                        f"Username: @{user.username}\n"
                        f"–ò–º—è: {user.fullname}")
        if int(user.is_notif) == 1:
            try:
                await bot.send_message(
                    chat_id=user.user_id,
                    text = (f"<b>–í–æ—Ç –∏ –≤—Å—ë ‚Äî —É—á–µ–±–Ω—ã–π –≥–æ–¥ –ø–æ–¥–æ—à—ë–ª –∫ –∫–æ–Ω—Ü—É üéì</b>\n"
                            "<b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª–∏ —Å –Ω–∞–º–∏ –≤—Å—ë —ç—Ç–æ –≤—Ä–µ–º—è ‚ù§Ô∏è</b>\n\n"
                            "üìö 9—ã–º –∏ 11—ã–º —É–¥–∞—á–∏ –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–∞—Ö ‚Äî –≤—ã —Ç–æ—á–Ω–æ —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å!\n"
                            "üåà –ñ–µ–ª–∞–µ–º –≤–∞–º —è—Ä–∫–æ–≥–æ, —Ç—ë–ø–ª–æ–≥–æ –∏ –±–µ–∑–∑–∞–±–æ—Ç–Ω–æ–≥–æ –ª–µ—Ç–∞.\n"
                            "–ü—É—Å—Ç—å –±—É–¥–µ—Ç –ø–æ–±–æ–ª—å—à–µ –æ—Ç–¥—ã—Ö–∞, —Å–æ–ª–Ω—Ü–∞ –∏ –≤–µ—Å—ë–ª—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤!\n\n"
                            "<i>–ê –º—ã –≤–µ—Ä–Ω—ë–º—Å—è –≤ –Ω–æ–≤–æ–º —É—á–µ–±–Ω–æ–º –≥–æ–¥—É ‚Äî –µ—â—ë –ª—É—á—à–µ üí™</i>"))


                # await bot.send_message(
                # chat_id=user.user_id,
                # text = (
                #         "üî• <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—Å—è –≤ 00:00!</b> üî•\n\n"
                #         "‚è≥ –í—Ä–µ–º—è –Ω–∞ –∏—Å—Ö–æ–¥–µ! –£—Å–ø–µ–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ–∫–∞ –±–æ—Ç –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç.\n\n"
                #         "üöÄ <b>–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?</b> –ó–∞—Ö–æ–¥–∏ –≤ <b>–º–µ–Ω—é (/menu) </b>, –≤—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª –∏ –ø—Ä–æ–±—É–π —Å–∞–º!\n\n"
                #         "‚ö° <b>–°–ø–µ—à–∏, –ø–æ–∫–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ!</b> –ü–æ—Å–ª–µ 12—Ç–∏ –±–æ—Ç —É—Ö–æ–¥–∏—Ç –Ω–∞ –æ—Ç–¥—ã—Ö üòè\n\n"
                #         "<i>üîß –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –º–µ–Ω—é –ø–æ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!</i>"
                #     ))


                await asyncio.sleep(0.7)
                await bot.send_message(1006706663, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:\n{user_info}")
                success_count += 1
                await asyncio.sleep(0.7)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

            except TelegramForbiddenError:
                failed_count += 1
                a = await Database.del_user(int(user.user_id))
                if a:
                    await bot.send_message(1006706663,f"‚ö†‚ö†‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \nID: {user.user_id}\nUsername: @{user.username}\n–ò–º—è: {user.fullname} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ –æ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î.")
                else:
                    await bot.send_message(1006706663,f"‚ùå –ù–ï –£–î–ê–õ–û–°–¨!!!! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \nID: {user.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ –æ–Ω –ù–ï –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î.")
                
            except TelegramRetryAfter as e:
                await bot.send_message(1006706663, f"‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤! –ñ–¥—É {e.retry_after} —Å–µ–∫.")
                await asyncio.sleep(e.retry_after)  # –ñ–¥—ë–º, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
                
            except Exception as e:
                failed_count += 1
                await bot.send_message(1006706663, f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é \nID: {user.user_id}\nUsername: @{user.username}\n–ò–º—è: {user.fullname}: {e}")
                
    await bot.send_message(1006706663, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                            f"‚úî –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                                            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
                                            f"–û—Ç–∫–ª —Ä–∞—Å—Å—ã–ª–∫—É {zabl_count}")