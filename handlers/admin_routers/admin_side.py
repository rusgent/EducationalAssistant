from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandObject
import datetime
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramForbiddenError, TelegramRetryAfter
from pdf2image import convert_from_bytes
import asyncio
import os
from handlers.user_routers.states import *
from aiogram.fsm.context import FSMContext
from database.orm import Database
from keyboards import inline_kb
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin, quote
from io import BytesIO
from aiogram.filters import BaseFilter
from dotenv import load_dotenv
from aiogram.types import Message
import os
import logging

load_dotenv()
logging.basicConfig(level=logging.INFO)

admin_ids = [int(admin_id) for admin_id in os.getenv("ADMIN_IDS", "").split(",")]

class IsAdmin(BaseFilter):
    def __init__(self, admin_ids: list[int]):
        self.admin_ids = admin_ids

    async def __call__(self, message: Message) -> bool:
        is_admin = message.from_user.id in self.admin_ids
        return is_admin

admin_ids = [int(admin_id) for admin_id in os.getenv("ADMIN_IDS", "").split(",")]

admin_router = Router()
admin_router.message.filter(IsAdmin(admin_ids))

async def add_proxy_data(state: FSMContext, data: dict):
    # –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    proxy_data = await state.get_data()

    # –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ
    proxy_data.update(data)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await state.set_data(proxy_data)


@admin_router.message(Command("ad"))
async def cmd_admin_panel(message: Message):
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    ADMIN_PANEL_TEXT = (
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b> üîê\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"
        "üìã <b>/view_users</b> ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/find_menu - –ù–∞–π—Ç–∏ –º–µ–Ω—é\n"
        '/upd_menu_bd - –û–±–Ω–æ–≤–∏—Ç—å –ë–î'
    )
    await message.answer(ADMIN_PANEL_TEXT, parse_mode="HTML")
    
    
@admin_router.message(Command("testmenu"))
async def cmd_test(message: Message):
        await message.answer(text = (
                        "üî• <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—Å—è –≤ 00:00!</b> üî•\n\n"
                        "‚è≥ –í—Ä–µ–º—è –Ω–∞ –∏—Å—Ö–æ–¥–µ! –£—Å–ø–µ–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ–∫–∞ –±–æ—Ç –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç.\n\n"
                        "üöÄ <b>–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?</b> –ó–∞—Ö–æ–¥–∏ –≤ <b>–º–µ–Ω—é (/menu) </b>, –≤—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª –∏ –ø—Ä–æ–±—É–π —Å–∞–º!\n\n"
                        "‚ö° <b>–°–ø–µ—à–∏, –ø–æ–∫–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ!</b> –ü–æ—Å–ª–µ 12—Ç–∏ –±–æ—Ç —É—Ö–æ–¥–∏—Ç –Ω–∞ –æ—Ç–¥—ã—Ö üòè\n\n"
                        "<i>üîß –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –º–µ–Ω—é –ø–æ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!</i>"
                    ))
        
@admin_router.message(Command('del'))
async def cmd_del_user(message: Message, command: CommandObject):
    user_id = int(command.args)
    a = await Database.del_user(user_id)
    if a:
        await message.answer(f"‚úÖ‚úÖ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \nID: {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ –æ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î.")
    else:
        await message.answer(f"‚ùå –ù–ï –£–î–ê–õ–û–°–¨!!!! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \nID: {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ –æ–Ω –ù–ï –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î.")


@admin_router.message(Command("view_users"))
async def view_users(message: Message):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    users = await Database.get_all_users()
    user_count = len(users)

    if users:
        user_list = "\n".join([f"ID: {user.user_id}, Username: @{user.username}, –ò–º—è: {user.fullname}" for user in users])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
        max_message_length = 4000
        if len(user_list) > max_message_length:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏
            chunks = [user_list[i:i + max_message_length] for i in range(0, len(user_list), max_message_length)]
            for chunk in chunks:
                await message.answer(
                    f"üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{chunk}\n\n"
                    f"üî¢ <b>–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {user_count}",
                    parse_mode="HTML"
                )
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Ü–µ–ª–∏–∫–æ–º
            await message.answer(
                f"üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n{user_list}\n\n"
                f"üî¢ <b>–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {user_count}",
                parse_mode="HTML"
            )
    else:
        await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        
        
 # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PDF-—Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç—å
def download_pdf_in_memory(pdf_url):
    response = requests.get(pdf_url)
    if response.status_code == 200:
        return response.content
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏
def pdf_to_image_from_bytes(pdf_bytes):
    images = convert_from_bytes(pdf_bytes)
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img_io = BytesIO()
    images[0].save(img_io, 'PNG')
    img_io.seek(0)
    return img_io

@admin_router.message(Command('upd_menu_bd'))
async def cmd_upd_menu(message: Message, state: FSMContext):
    await message.answer(f'–£—à–µ–ª –∏—Å–∫–∞—Ç—å –º–µ–Ω—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –±–¥, —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å –±–æ—Å—Å!')
    url = "https://moausoch3buraevo.02edu.ru/meal/menu/"

    responce = requests.get(url)

    if responce.status_code == 200:
        soup = BeautifulSoup(responce.text, 'html.parser')

        pdf_link = soup.find('a', class_='mr-1 sf-link sf-link-theme sf-link-dashed')
        data = soup.find('h3', class_="t-1 mt-4")
        if pdf_link and 'href' in pdf_link.attrs and data:
            pdf_url = urljoin(url, pdf_link['href'])
            res_url = quote(pdf_url, safe=':/')
            await state.update_data({"data": data.text.strip()})
            if res_url:
                await message.answer(f'–î–∞—Ç–∞ - {data.text.strip()}\n–°—Å—ã–ª–∫–∞ –Ω–∞ PDF-–º–µ–Ω—é - {res_url}')
                await state.set_state(SendMenu.wait_photo_to_bd)
            else:
                await message.answer(f'–Ø –Ω–µ –Ω–∞—à–µ–ª –º–µ–Ω—é!!!')
        else:
            await message.answer(f'–Ø –Ω–µ –Ω–∞—à–µ–ª –º–µ–Ω—é!!!')

    else:
        await message.answer(f'–Ø –Ω–µ –Ω–∞—à–µ–ª –º–µ–Ω—é!!!')

@admin_router.message(SendMenu.wait_photo_to_bd)
async def get_photo_to_upd_meu(message: Message, state: FSMContext):
    if message.photo:
        photo_id = message.photo[-1].file_id
        data = await state.get_data()
        date = data.get('data')
        await Database.edit_school_menu_id(photo_id, date=date)
        await message.answer((f"‚úÖ –ó–∞–ø–∏—Å—å –≤ –ë–î —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞\n"
                               f"Photo_id - {photo_id}\n"
                               f"Date - {date}"))


@admin_router.message(Command('find_menu'))
async def cmd_find_menu(message: Message, state: FSMContext):
    await message.answer(f'–£—à–µ–ª –∏—Å–∫–∞—Ç—å –º–µ–Ω—é, —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—É—Å—å –±–æ—Å—Å!')
    url = "https://moausoch3buraevo.02edu.ru/meal/menu/"

    responce = requests.get(url)

    if responce.status_code == 200:
        soup = BeautifulSoup(responce.text, 'html.parser')

        pdf_link = soup.find('a', class_='mr-1 sf-link sf-link-theme sf-link-dashed')
        data = soup.find('h3', class_="t-1 mt-4")
        if pdf_link and 'href' in pdf_link.attrs and data:
            pdf_url = urljoin(url, pdf_link['href'])
            res_url = quote(pdf_url, safe=':/')
            await state.update_data({"data": data.text.strip()})
            if res_url:
                await message.answer(f'–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –î–∞—Ç–∞ - {datetime.datetime.now().strftime("%Y-%m-%d")}\n–î–∞—Ç–∞ - {data.text.strip()}\n–°—Å—ã–ª–∫–∞ –Ω–∞ PDF-–º–µ–Ω—é - {res_url}')
                await state.set_state(SendMenu.wait_photo)
            else:
                await message.answer(f'–Ø –Ω–µ –Ω–∞—à–µ–ª –º–µ–Ω—é!!!')
        else:
            await message.answer(f'–Ø –Ω–µ –Ω–∞—à–µ–ª –º–µ–Ω—é!!!')

    else:
        await message.answer(f'–Ø –Ω–µ –Ω–∞—à–µ–ª –º–µ–Ω—é!!!')
        
@admin_router.message(SendMenu.wait_photo)
async def get_photo(message: Message, state: FSMContext):
    if message.photo:
        photo_id = message.photo[-1].file_id
        data = await state.get_data()
        date = data.get('data')
        await message.answer_photo(
                    photo=photo_id,
                    caption=(f"<b><blockquote>–ú–µ–Ω—é –Ω–∞ {date}</blockquote></b>\n\n"
                        "<a href='https://t.me/botdevrus'>üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</a>\n"
                        "üí° <b>–ú—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç—ã –∫ –≤–∞—à–∏–º –∏–¥–µ—è–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º!</b> –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –µ—â—ë –ª—É—á—à–µ, "
                        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º–∏ —Å –Ω–∞–º–∏ ‚Äî –º—ã —Ä–∞–¥—ã —Å–ª—ã—à–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!\n\n"
                        "‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã - /notif_menu ‚ùóÔ∏è\n"
                        "<i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∂–µ–ª–∞–µ—Ç –≤–∞–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏ üòä</i>")
                        )
        await message.answer_photo(photo=photo_id, caption='–í—ã –∂–µ–ª–∞–µ—Ç–µ –¥–∞–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º —é–∑–µ—Ä–∞–º?')
        await state.update_data(photo_id=photo_id)
        await state.set_state(SendMenu.wait_yes)
        
@admin_router.message(SendMenu.wait_yes)
async def send_menu_users(message: Message, state: FSMContext, bot: Bot):
    failed_count = 0
    success_count = 0
    zabl_count = 0
    if message.text == '1':
        data = await state.get_data()
        photo_id = data.get('photo_id')
        date = data.get('data')
        await Database.edit_school_menu_id(photo_id, date=date)
        await message.answer((f"‚úÖ –ó–∞–ø–∏—Å—å –≤ –ë–î —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞\n"
                               f"Photo_id - {photo_id}\n"
                               f"Date - {date}"))
        
        users_list = await Database.get_all_users()
            
        for user in users_list:
            user_info = (f"ID: {user.user_id}\n"
                         f"Username: @{user.username}\n"
                         f"–ò–º—è: {user.fullname}")
            if int(user.is_notif) == 1:
                try:
                    await bot.send_photo(
                        chat_id=user.user_id,
                        photo=photo_id,
                        caption=(f"<b><blockquote>–ú–µ–Ω—é –Ω–∞ {date}</blockquote></b>\n\n"
                        "<a href='https://t.me/botdevrus'>üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</a>\n"
                        "üí° <b>–ú—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç—ã –∫ –≤–∞—à–∏–º –∏–¥–µ—è–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º!</b> –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ–∏, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –±–æ—Ç–∞ –µ—â—ë –ª—É—á—à–µ, "
                        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º–∏ —Å –Ω–∞–º–∏ ‚Äî –º—ã —Ä–∞–¥—ã —Å–ª—ã—à–∞—Ç—å –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!\n\n"
                        "‚ùóÔ∏è –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–æ—Ç–ø—Ä–∞–≤–∫—É –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã - /notif_menu ‚ùóÔ∏è\n"
                        "<i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∂–µ–ª–∞–µ—Ç –≤–∞–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π –Ω–µ–¥–µ–ª–∏ üòä</i>")
                        )

                    # await bot.send_message(
                    # chat_id=user.user_id,
                    # text = (
                    #         "üî• <b>–í–Ω–∏–º–∞–Ω–∏–µ! –ë–æ—Ç –æ—Ç–∫–ª—é—á–∏—Ç—Å—è –≤ 00:00!</b> üî•\n\n"
                    #         "‚è≥ –í—Ä–µ–º—è –Ω–∞ –∏—Å—Ö–æ–¥–µ! –£—Å–ø–µ–π –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ–∫–∞ –±–æ—Ç –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç.\n\n"
                    #         "üöÄ <b>–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?</b> –ó–∞—Ö–æ–¥–∏ –≤ <b>–º–µ–Ω—é (/menu) </b>, –≤—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª –∏ –ø—Ä–æ–±—É–π —Å–∞–º!\n\n"
                    #         "‚ö° <b>–°–ø–µ—à–∏, –ø–æ–∫–∞ –Ω–µ –ø–æ–∑–¥–Ω–æ!</b> –ü–æ—Å–ª–µ 12—Ç–∏ –±–æ—Ç —É—Ö–æ–¥–∏—Ç –Ω–∞ –æ—Ç–¥—ã—Ö üòè\n\n"
                    #         "<i>üîß –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –º–µ–Ω—é –ø–æ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!</i>"
                    #     ))


                    await asyncio.sleep(0.7)
                    await bot.send_message(1006706663, f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:\n{user_info}")
                    success_count += 1
                    await asyncio.sleep(0.7)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

                except TelegramForbiddenError:
                    failed_count += 1
                    a = await Database.del_user(int(user.user_id))
                    if a:
                        await bot.send_message(1006706663,f"‚ö†‚ö†‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \nID: {user.user_id}\nUsername: @{user.username}\n–ò–º—è: {user.fullname} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ –æ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î.")
                    else:
                        await bot.send_message(1006706663,f"‚ùå –ù–ï –£–î–ê–õ–û–°–¨!!!! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å \nID: {user.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ –æ–Ω –ù–ï –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î.")
                    
                except TelegramRetryAfter as e:
                    await bot.send_message(1006706663, f"‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤! –ñ–¥—É {e.retry_after} —Å–µ–∫.")
                    await asyncio.sleep(e.retry_after)  # –ñ–¥—ë–º, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
                    
                except Exception as e:
                    failed_count += 1
                    await bot.send_message(1006706663, f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é \nID: {user.user_id}\nUsername: @{user.username}\n–ò–º—è: {user.fullname}: {e}")
            elif int(user.is_notif) == 0:
                zabl_count += 1

            # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É –∏—Ç–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏
        await bot.send_message(1006706663, f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                            f"‚úî –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                                            f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
                                            f"–û—Ç–∫–ª —Ä–∞—Å—Å—ã–ª–∫—É {zabl_count}")

        await state.clear()
    elif message.text == '0':
        await state.clear()
        await bot.send_message(1006706663, f"–û–¢–ú–ï–ù–ê –±—Ä–∞—Ç–∏—à–∫–∞)\n")